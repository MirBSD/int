{
  "jobs": {
    "bt-asan": {
      "runs-on": "ubuntu-22.04",
      "steps": [
        {
          "name": "Cancel previous runs",
          "uses": "styfle/cancel-workflow-action@0.12.1",
          "with": {
            "access_token": "${{ github.token }}",
            "all_but_latest": true
          }
        },
        {
          "uses": "actions/checkout@v4.2.2"
        },
        {
          "run": "(git gc --quiet || :)"
        },
        {
          "run": "ASAN_OPTIONS=check_initialization_order=true:detect_stack_use_after_return=true:detect_invalid_pointer_pairs=2:dump_instruction_bytes=true:color=never:strict_string_checks=true:exitcode=251 && export ASAN_OPTIONS && : \"${CC=cc}${CFLAGS=-O2}\"; eval \"$(env DEB_BUILD_MAINT_OPTIONS='future=+all qa=+all,-canary optimize=+all,-lto hardening=+all reproducible=+all' dpkg-buildflags --export=sh || :)\"; export LDFLAGS; exec sh mkt-int.sh $CC $CPPFLAGS $CFLAGS -Og -fstack-protector-strong -Wformat -Werror=format-security -Wall -Wextra -fsanitize=address -fno-omit-frame-pointer -fno-common -fsanitize=pointer-compare -fsanitize=pointer-subtract -fsanitize=undefined -fsanitize=shift -fsanitize=shift-exponent -fsanitize=shift-base -fsanitize=integer-divide-by-zero -fsanitize=unreachable -fsanitize=vla-bound -fsanitize=null -fsanitize=signed-integer-overflow -fsanitize=bounds -fsanitize=bounds-strict -fsanitize=alignment -fsanitize=object-size -fsanitize=nonnull-attribute -fsanitize=returns-nonnull-attribute -fsanitize=bool -fsanitize=enum -fsanitize=vptr -fsanitize=pointer-overflow -fsanitize=builtin -fsanitize-address-use-after-scope -fstack-clash-protection -DMBSDINT_H_WANT_PTR_IN_SIZET -DMBSDINT_H_WANT_SIZET_IN_LONG -DMBSDINT_H_WANT_INT32 -DMBSDINT_H_WANT_LRG64 -DMBSDINT_H_WANT_SAFEC"
        }
      ],
      "strategy": {
        "fail-fast": true
      }
    },
    "bt-clang": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "uses": "actions/checkout@v4.2.2"
        },
        {
          "run": "(git gc --quiet || :)"
        },
        {
          "run": ": \"${CFLAGS=-O2}\"; eval \"$(env DEB_BUILD_MAINT_OPTIONS='future=+all optimize=+all,-lto hardening=+all reproducible=+all' dpkg-buildflags --export=sh || :)\"; export LDFLAGS; exec sh mkt-int.sh clang $CPPFLAGS $CFLAGS -Wall -Wextra -DMBSDINT_H_WANT_PTR_IN_SIZET -DMBSDINT_H_WANT_SIZET_IN_LONG -DMBSDINT_H_WANT_INT32 -DMBSDINT_H_WANT_LRG64 -DMBSDINT_H_WANT_SAFEC"
        }
      ],
      "strategy": {
        "fail-fast": true
      }
    },
    "bt-normal": {
      "runs-on": "${{ matrix.os }}",
      "steps": [
        {
          "uses": "actions/checkout@v4.2.2"
        },
        {
          "run": "(git gc --quiet || :)"
        },
        {
          "run": ": \"${CC=cc}${CXX=c++}${CFLAGS=-O2}${CXXFLAGS=-O2}\"; eval \"$(env DEB_BUILD_MAINT_OPTIONS='future=+all qa=+all,-canary optimize=+all,-lto hardening=+all reproducible=+all' dpkg-buildflags --export=sh || :)\"; export LDFLAGS; sh mkt-int.sh $CC $CPPFLAGS $CFLAGS -Wall -Wextra -DMBSDINT_H_WANT_PTR_IN_SIZET -DMBSDINT_H_WANT_SIZET_IN_LONG -DMBSDINT_H_WANT_INT32 -DMBSDINT_H_WANT_LRG64 -DMBSDINT_H_WANT_SAFEC && exec sh mkt-int.sh -cxx $CXX $CPPFLAGS $CXXFLAGS -Wall -Wextra -DMBSDINT_H_WANT_PTR_IN_SIZET -DMBSDINT_H_WANT_SIZET_IN_LONG -DMBSDINT_H_WANT_INT32 -DMBSDINT_H_WANT_LRG64 -DMBSDINT_H_WANT_SAFEC"
        }
      ],
      "strategy": {
        "fail-fast": true,
        "matrix": {
          "os": [
            "ubuntu-24.04",
            "macos-12",
            "macos-13",
            "macos-14"
          ]
        }
      }
    },
    "chroot-alpine": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "uses": "actions/checkout@v4.2.2"
        },
        {
          "run": "(git gc --quiet || :)"
        },
        {
          "uses": "jirutka/setup-alpine@v1.3.0",
          "with": {
            "arch": "${{ matrix.alpinearch }}",
            "branch": "edge",
            "packages": "build-base"
          }
        },
        {
          "run": ": \"${CC=cc}${CXX=c++}${CFLAGS=-O2}${CXXFLAGS=-O2}\"; eval \"$(env DEB_BUILD_MAINT_OPTIONS='future=+all qa=+all,-canary optimize=+all,-lto hardening=+all reproducible=+all' dpkg-buildflags --export=sh || :)\"; export LDFLAGS; sh mkt-int.sh $CC $CPPFLAGS $CFLAGS -Wall -Wextra -DMBSDINT_H_WANT_PTR_IN_SIZET -DMBSDINT_H_WANT_SIZET_IN_LONG -DMBSDINT_H_WANT_INT32 -DMBSDINT_H_WANT_LRG64 -DMBSDINT_H_WANT_SAFEC && exec sh mkt-int.sh -cxx $CXX $CPPFLAGS $CXXFLAGS -Wall -Wextra -DMBSDINT_H_WANT_PTR_IN_SIZET -DMBSDINT_H_WANT_SIZET_IN_LONG -DMBSDINT_H_WANT_INT32 -DMBSDINT_H_WANT_LRG64 -DMBSDINT_H_WANT_SAFEC",
          "shell": "alpine.sh {0}"
        }
      ],
      "strategy": {
        "fail-fast": true,
        "matrix": {
          "alpinearch": [
            "aarch64",
            "armhf",
            "armv7",
            "ppc64le",
            "riscv64",
            "s390x",
            "x86",
            "x86_64"
          ]
        }
      }
    }
  },
  "name": "build-and-test",
  "on": {
    "push": {
      "branches": [
        "GHA"
      ]
    },
    "workflow_dispatch": null
  }
}
